require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StatesController, type: :controller do
  login_admin

  describe "GET index" do
    it "assigns all states as @states" do
      state = FactoryGirl.create(:state)
      get :index, {}
      expect(assigns(:states)).to match_array(State.all)
    end
  end

  describe "GET show" do
    it "assigns the requested state as @state" do
      state = FactoryGirl.create(:state)
      get :show, {:id => state.to_param}
      expect(assigns(:state)).to eq(state)
    end
  end

  describe "GET new" do
    it "assigns a new state as @state" do
      get :new, {}
      expect(assigns(:state)).to be_a_new(State)
    end
  end

  describe "GET edit" do
    it "assigns the requested state as @state" do
      state = FactoryGirl.create(:state)
      get :edit, state.attributes
      expect(assigns(:state)).to eq(state)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new State" do
        state = FactoryGirl.create(:state)
        expect {
          post :create, {:state => state.attributes}
        }.to change(State, :count).by(1)
      end

      it "assigns a newly created state as @state" do
        state = FactoryGirl.create(:state)
        post :create, {:state => state.attributes}
        expect(assigns(:state)).to be_a(State)
        expect(assigns(:state)).to be_persisted
      end

      it "redirects to the created state" do
        state = FactoryGirl.create(:state)
        post :create, {:state => state.attributes}
        expect(response).to redirect_to(State.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved state as @state" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(State).to receive(:save).and_return(false)
        post :create, {:state => { "name" => "invalid value" }}
        expect(assigns(:state)).to be_a_new(State)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(State).to receive(:save).and_return(false)
        post :create, {:state => { "name" => "invalid value" }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested state" do
        state = FactoryGirl.create(:state)
        # Assuming there are no other states in the database, this
        # specifies that the State created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect(allow_any_instance_of(State).to receive(:update_attributes).with({ "name" => "MyString" }))
        put :update, {:id => state.to_param, :state => { "name" => "MyString" }}
      end

      it "assigns the requested state as @state" do
        state = FactoryGirl.create(:state)
        put :update, {:id => state.to_param, :state => state.attributes}
        expect(assigns(:state)).to eq(state)
      end

      it "redirects to the state" do
        state = FactoryGirl.create(:state)
        put :update, {:id => state.to_param, :state => state.attributes}
        expect(response).to redirect_to(state)
      end
    end

    describe "with invalid params" do
      it "assigns the state as @state" do
        state = FactoryGirl.create(:state)
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(State).to receive(:save).and_return(false)
        put :update, {:id => state.to_param, :state => { "name" => "invalid value" }}
        expect(assigns(:state)).to eq(state)
      end

      it "re-renders the 'edit' template" do
        state = FactoryGirl.create(:state)
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(State).to receive(:save).and_return(false)
        put :update, {:id => state.to_param, :state => { "name" => "invalid value" }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested state" do
      state = FactoryGirl.create(:state)
      expect {
        delete :destroy, {:id => state.to_param}
      }.to change(State, :count).by(-1)
    end

    it "redirects to the states list" do
      state = FactoryGirl.create(:state)
      delete :destroy, {:id => state.to_param}
      expect(response).to redirect_to(states_url)
    end
  end
end
