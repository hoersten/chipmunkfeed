require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CitiesController, type: :controller do
  login_admin

  describe "GET index" do
    it "assigns all cities as @cities" do
      state = FactoryGirl.create(:state_with_cities)
      get :index, { state: state.slug }
      expect(assigns(:cities)).to eq(state.cities)
    end
  end

  describe "GET show" do
    it "assigns the requested city as @city" do
      city = FactoryGirl.create(:city)
      get :show, {:state => city.state.slug, :id => (city.slug.gsub(city.state.slug + '/', ''))}
      expect(assigns(:city)).to eq(city)
    end
  end

  describe "GET new" do
    it "assigns a new city as @city" do
      get :new, {}
      expect(assigns(:city)).to be_a_new(City)
    end
  end

  describe "GET edit" do
    it "assigns the requested city as @city" do
      city = FactoryGirl.create(:city)
      get :edit, {:id => city.to_param}
      expect(assigns(:city)).to eq(city)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new City" do
        city = FactoryGirl.create(:city)
        expect {
          post :create, {:city => city.attributes}
        }.to change(City, :count).by(1)
      end

      it "assigns a newly created city as @city" do
        city = FactoryGirl.create(:city)
        post :create, {:city => city.attributes}
        expect(assigns(:city)).to be_a(City)
        expect(assigns(:city)).to be_persisted
      end

      it "redirects to the created city" do
        city = FactoryGirl.create(:city)
        post :create, {:city => city.attributes}
        expect(response).to redirect_to(City.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved city as @city" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(City).to receive(:save).and_return(false)
        post :create, {:city => { :state => nil }}
        expect(assigns(:city)).to be_a_new(City)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(City).to receive(:save).and_return(false)
        post :create, {:city => { :state => nil }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested city" do
        city = FactoryGirl.create(:city)
        # Assuming there are no other cities in the database, this
        # specifies that the City created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect(allow_any_instance_of(City)).to receive(:update_attributes).with({ "name" => "My Name" })
        put :update, {:id => city.to_param, :city => { "name" => "My Name" }}
      end

      it "assigns the requested city as @city" do
        city = FactoryGirl.create(:city)
        put :update, {:id => city.to_param, :city => city.attributes}
        expect(assigns(:city)).to eq(city)
      end

      it "redirects to the city" do
        city = FactoryGirl.create(:city)
        put :update, {:id => city.to_param, :city => city.attributes}
        expect(response).to redirect_to(city)
      end
    end

    describe "with invalid params" do
      it "assigns the city as @city" do
        city = FactoryGirl.create(:city)
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(City).to receive(:save).and_return(false)
        put :update, {:id => city.to_param, :city => { :state => nil }}
        expect(assigns(:city)).to eq(city)
      end

      it "re-renders the 'edit' template" do
        city = FactoryGirl.create(:city)
        # Trigger the behavior that occurs when invalid params are submitted
        expect(allow_any_instance_of(City)).to receive(:save).and_return(false)
        put :update, {:id => city.to_param, :city => { :state => nil }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested city" do
      city = FactoryGirl.create(:city)
      expect {
        delete :destroy, {:id => city.to_param}
      }.to change(City, :count).by(-1)
    end

    it "redirects to the cities list" do
      city = FactoryGirl.create(:city)
      delete :destroy, {:id => city.to_param}
      expect(response).to redirect_to(cities_url)
    end
  end

end
